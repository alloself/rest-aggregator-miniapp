<?php

namespace App\Jobs;

use App\Models\News;
use App\Models\Restaurant;
use App\Models\User;
use App\Models\RestaurantChat;
use App\Services\TelegramBotService;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;

/**
 * –ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ Telegram-–±–æ—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
 *
 * –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:
 * - –ï—Å–ª–∏ —É –Ω–æ–≤–æ—Å—Ç–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É (InputMediaPhoto[]) —Å –ø–æ–¥–ø–∏—Å—å—é —É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 * - –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å chat_id (owner + users M2M)
 */
class PublishNewsToTelegramJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    /**
     * @var string
     */
    private string $news_id;

    /**
     * @param string $newsId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–∏
     */
    public function __construct(string $newsId)
    {
        $this->news_id = $newsId;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é.
     */
    public function handle(): void
    {
        Log::info('PublishNewsToTelegramJob: —Å—Ç–∞—Ä—Ç', [
            'news_id' => $this->news_id,
        ]);
        /** @var News|null $news */
        $news = News::query()
            ->with(['restaurant', 'images'])
            ->find($this->news_id);

        if (!$news) {
            Log::warning('PublishNewsToTelegramJob: –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', [
                'news_id' => $this->news_id,
            ]);
            return;
        }

        /** @var Restaurant|null $restaurant */
        $restaurant = $news->restaurant;
        if (!$restaurant || empty($restaurant->telegram_bot_token)) {
            // –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞ ‚Äî –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ–∫—É–¥–∞
            Log::warning('PublishNewsToTelegramJob: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏–ª–∏ –µ–≥–æ —Ç–æ–∫–µ–Ω', [
                'news_id' => $news->getKey(),
                'has_restaurant' => (bool) $restaurant,
            ]);
            return;
        }

        $service = new TelegramBotService($restaurant->telegram_bot_token);

        $recipients = $this->collectRecipients($restaurant);
        if ($recipients->isEmpty()) {
            Log::info('PublishNewsToTelegramJob: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç', [
                'news_id' => $news->getKey(),
            ]);
            return;
        }

        $text = $this->buildText($news);

        $imageUrls = $news->images->map(function ($file) {
            /** @var \App\Models\File $file */
            return (string) $file->url;
        })->filter(fn ($url) => $url !== '')->values();

        foreach ($recipients as $chatId) {
            try {
                if ($imageUrls->isNotEmpty()) {
                    $this->sendMediaGroup($service, $chatId, $imageUrls, $text);
                } else {
                    $service->sendMessage([
                        'chat_id' => $chatId,
                        'text' => $text,
                        'parse_mode' => 'HTML',
                    ]);
                }
                Log::info('PublishNewsToTelegramJob: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', [
                    'chat_id' => $chatId,
                    'news_id' => $news->getKey(),
                    'with_images' => $imageUrls->isNotEmpty(),
                ]);
            } catch (\Throwable $e) {
                Log::warning('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –≤ Telegram', [
                    'news_id' => $news->getKey(),
                    'restaurant_id' => $restaurant->getKey(),
                    'chat_id' => $chatId,
                    'error' => $e->getMessage(),
                ]);
            }
        }
    }

    /**
     * –°–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ chat_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: –≤–ª–∞–¥–µ–ª–µ—Ü + –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.
     *
     * @return Collection<int,int|string>
     */
    private function collectRecipients(Restaurant $restaurant): Collection
    {
        $chatIds = collect();

        $users = $restaurant->users()->get();
        foreach ($users as $user) {
            $pivotChatId = $user->pivot?->chat_id;
            if (!empty($pivotChatId)) {
                $chatIds->push($pivotChatId);
            }
        }

        // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é telegram_user –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (teams)
        $currentTeam = getPermissionsTeamId();
        setPermissionsTeamId($restaurant->getKey());
        /** @var \Illuminate\Database\Eloquent\Collection<int,User> $usersWithRole */
        $usersWithRole = User::role('telegram_user')->get();
        setPermissionsTeamId($currentTeam);

        foreach ($usersWithRole as $user) {
            $pivotChatId = $restaurant->users()->where('users.id', $user->id)->first()?->pivot?->chat_id;
            if (!empty($pivotChatId)) {
                $chatIds->push($pivotChatId);
            }
        }

        return $chatIds->unique()->values();
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–∏.
     */
    private function buildText(News $news): string
    {
        $title = trim((string) $news->title);
        $description = $this->cleanForTelegram((string) $news->description);

        $header = $title !== '' ? 'üì∞ ' . $title : 'üì∞ –ù–æ–≤–æ—Å—Ç—å';
        $body = $description !== '' ? "\n\n{$description}" : '';

        return $header . $body;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É (–¥–æ 10 —Ñ–æ—Ç–æ). –ü–æ–¥–ø–∏—Å—å ‚Äî —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
     * Telegram —Ç—Ä–µ–±—É–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ InputMediaPhoto, –ø–æ–ª–µ media ‚Äî HTTP URL.
     *
     * @param Collection<int,string> $imageUrls
     */
    private function sendMediaGroup(TelegramBotService $service, int|string $chatId, Collection $imageUrls, string $caption): void
    {
        // –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10 —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ Bot API
        $limited = $imageUrls->take(10)->values();

        $media = [];
        foreach ($limited as $index => $url) {
            $item = [
                'type' => 'photo',
                'media' => $url,
            ];

            if ($index === 0) {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è caption (—Ñ–æ—Ç–æ: ~1024 —Å–∏–º–≤–æ–ª–∞)
                $item['caption'] = mb_substr($caption, 0, 1000);
                $item['parse_mode'] = 'HTML';
            }

            $media[] = $item;
        }

        $service->sendMediaGroup([
            'chat_id' => $chatId,
            'media' => $media,
        ]);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å HTML –¥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã.
     */
    private function cleanForTelegram(string $text): string
    {
        $text = strip_tags($text);
        $text = html_entity_decode($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');
        $text = str_replace(["\xC2\xA0", "&nbsp;"], ' ', $text);
        $text = (string) preg_replace('/\s+/u', ' ', $text);
        return trim($text);
    }
}


