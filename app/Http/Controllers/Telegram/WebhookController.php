<?php

namespace App\Http\Controllers\Telegram;

use App\Http\Controllers\Controller;
use App\Models\Restaurant;
use App\Models\User;
use App\Models\File;
use App\Services\TelegramBotService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use Symfony\Component\HttpFoundation\Response as BaseResponse;
use Throwable;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
 * –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TelegramBotService v2.0 (API 9.1)
 * 
 * @version 2.0
 */
class WebhookController extends Controller
{
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
     */
    public function handle(Request $request, Restaurant $restaurant)
    {
        $update = $request->all();

        Log::info('üöÄ –û–¢–õ–ê–î–ö–ê: Telegram Webhook –ø–æ–ª—É—á–µ–Ω', [
            'restaurant_id' => $restaurant->id,
            'update_type' => $this->getUpdateType($update),
            'full_update' => $update,
            'step' => 'webhook_received'
        ]);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            if (!$restaurant->telegram_bot_token) {
                Log::warning('Webhook –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞', [
                    'restaurant_id' => $restaurant->id,
                ]);
                return response()->noContent(BaseResponse::HTTP_OK);
            }

            $telegramService = new TelegramBotService($restaurant->telegram_bot_token);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            $this->processUpdate($update, $telegramService, $restaurant);
        } catch (Throwable $e) {
            Log::error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook', [
                'restaurant_id' => $restaurant->id,
                'error' => $e->getMessage(),
                'update' => $update,
            ]);
        }

        return response()->noContent(BaseResponse::HTTP_OK);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    private function processUpdate(array $update, TelegramBotService $service, Restaurant $restaurant): void
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (isset($update['message'])) {
            $this->handleMessage($update['message'], $service, $restaurant);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
        if (isset($update['callback_query'])) {
            $this->handleCallbackQuery($update['callback_query'], $service, $restaurant);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline query
        if (isset($update['inline_query'])) {
            $this->handleInlineQuery($update['inline_query'], $service, $restaurant);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ web app query
        if (isset($update['web_app_query'])) {
            $this->handleWebAppQuery($update['web_app_query'], $service, $restaurant);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout query (–ø–ª–∞—Ç–µ–∂–∏)
        if (isset($update['pre_checkout_query'])) {
            $this->handlePreCheckoutQuery($update['pre_checkout_query'], $service, $restaurant);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private function handleMessage(array $message, TelegramBotService $service, Restaurant $restaurant): void
    {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
        if (($message['chat']['type'] ?? '') !== 'private') {
            return;
        }

        $text = (string) ($message['text'] ?? '');
        $chatId = $message['chat']['id'];
        $from = $message['from'] ?? [];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if ($text === '/start' || str_starts_with($text, '/start ')) {
            $this->handleStartCommand($chatId, $service, $restaurant, $text, $from);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (isset($message['contact'])) {
            $this->handleContactMessage($message['contact'], $chatId, $service, $restaurant, $from);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if ($text === '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
            $this->handleSkipMessage($chatId, $service, $restaurant);
            return;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
     */
    private function handleStartCommand(int $chatId, TelegramBotService $service, Restaurant $restaurant, string $text, array $from): void
    {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º start –ø–∞—Ä–∞–º–µ—Ç—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        $startParam = null;
        if (str_starts_with($text, '/start ')) {
            $startParam = trim(substr($text, 7));
        }

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = $this->createOrUpdateFromTelegram($from);

        if ($user) {
            Log::info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Mini App', [
                'user_id' => $user->id,
                'chat_id' => $chatId,
                'restaurant_id' => $restaurant->id,
            ]);
        }

        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $greeting = $this->buildWelcomeMessage($restaurant);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        $service->sendMessage([
            'chat_id' => $chatId,
            'text' => $greeting,
            'parse_mode' => 'HTML',
        ]);

        Log::info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', [
            'restaurant_id' => $restaurant->id,
            'chat_id' => $chatId,
            'start_param' => $startParam,
            'user_id' => $user?->id,
        ]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        $this->sendContactRequestMessage($chatId, $service, $restaurant);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private function sendContactRequestMessage(int $chatId, TelegramBotService $service, Restaurant $restaurant): void
    {
        $contactMessage = "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö! üì±";

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–æ–∫
        $service->sendMessage([
            'chat_id' => $chatId,
            'text' => $contactMessage,
            'parse_mode' => 'HTML',
        ]);

        // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        $contactKeyboard = $service->createReplyKeyboard([
            [
                [
                    'text' => 'üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                    'request_contact' => true,
                ],
            ],
            [
                [
                    'text' => '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                ],
            ]
        ], true, false);

        $service->sendMessage([
            'chat_id' => $chatId,
            'text' => 'üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:',
            'reply_markup' => $contactKeyboard,
        ]);

        Log::info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤', [
            'restaurant_id' => $restaurant->id,
            'chat_id' => $chatId,
        ]);
    }



    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è inline –∫–Ω–æ–ø–æ–∫)
     */
    private function handleCallbackQuery(array $callbackQuery, TelegramBotService $service, Restaurant $restaurant): void
    {
        $callbackQueryId = $callbackQuery['id'];

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ª—é–±–æ–π callback query (–Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        $service->answerCallbackQuery([
            'callback_query_id' => $callbackQueryId,
        ]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline query
     */
    private function handleInlineQuery(array $inlineQuery, TelegramBotService $service, Restaurant $restaurant): void
    {
        $queryId = $inlineQuery['id'];
        $query = $inlineQuery['query'] ?? '';

        $results = [];

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
        $results[] = [
            'type' => 'article',
            'id' => 'restaurant_info',
            'title' => $restaurant->name,
            'description' => $restaurant->subtitle ?? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
            'input_message_content' => [
                'message_text' => "üè™ *{$restaurant->name}*\n\n"
                    . ($restaurant->description ? strip_tags($restaurant->description) : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω!'),
                'parse_mode' => 'Markdown',
            ],
        ];

        $service->answerInlineQuery([
            'inline_query_id' => $queryId,
            'results' => $results,
        ]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ web app query
     */
    private function handleWebAppQuery(array $webAppQuery, TelegramBotService $service, Restaurant $restaurant): void
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Mini App
        $queryId = $webAppQuery['id'];

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏ —Ç.–¥.

        Log::info('–ü–æ–ª—É—á–µ–Ω Web App query', [
            'restaurant_id' => $restaurant->id,
            'query_id' => $queryId,
        ]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout query (–ø–ª–∞—Ç–µ–∂–∏)
     */
    private function handlePreCheckoutQuery(array $preCheckoutQuery, TelegramBotService $service, Restaurant $restaurant): void
    {
        $queryId = $preCheckoutQuery['id'];

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–¥–æ–±—Ä—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏

        $service->answerPreCheckoutQuery([
            'pre_checkout_query_id' => $queryId,
            'ok' => true,
        ]);

        Log::info('–û–±—Ä–∞–±–æ—Ç–∞–Ω pre-checkout query', [
            'restaurant_id' => $restaurant->id,
            'query_id' => $queryId,
        ]);
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function buildWelcomeMessage(Restaurant $restaurant): string
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤–º–µ—Å—Ç–æ –ø–æ–ª—è welcome_message
        return "–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚Äî –≤—Å—ë —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –æ {$restaurant->name}: –º–µ–Ω—é, —Ñ–æ—Ç–æ, –∞–¥—Ä–µ—Å, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–æ–Ω—Å—ã —Å–æ–±—ã—Ç–∏–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
            . "–í–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Repeat ‚Äî —ç—Ç–æ –∑–Ω–∞–∫, —á—Ç–æ –≤—ã –∫ –Ω–∞–º –≤–µ—Ä–Ω–µ—Ç–µ—Å—å. –ò –≤–∞—à–∏ –¥—Ä—É–∑—å—è –≤ Telegram —É–≤–∏–¥—è—Ç, —á—Ç–æ –≤–∞–º –≤ {$restaurant->name} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n"
            . "–ê –µ—â—ë, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—à–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –±–ª–∏–∑–∫–∏—Ö –ª—é–¥–µ–π.\n\n"
            . "ü§© –ù–µ—É–∂–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –∫—É–¥–∞ —Ö–æ–¥—è—Ç –¥—Ä—É–∑—å—è ‚Äî –¥–∞–∂–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—è –∏—Ö –ª–∏—á–Ω–æ?!";
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è Mini App
     */
    private function buildWebAppUrl(Restaurant $restaurant): string
    {
        $baseUrl = rtrim((string) config('app.url'), '/');
        return "{$baseUrl}/restaurant/{$restaurant->slug}";
    }



    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private function getUpdateType(array $update): string
    {
        if (isset($update['message'])) {
            return 'message';
        }
        if (isset($update['callback_query'])) {
            return 'callback_query';
        }
        if (isset($update['inline_query'])) {
            return 'inline_query';
        }
        if (isset($update['web_app_query'])) {
            return 'web_app_query';
        }
        if (isset($update['pre_checkout_query'])) {
            return 'pre_checkout_query';
        }
        if (isset($update['shipping_query'])) {
            return 'shipping_query';
        }

        return 'unknown';
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ Telegram
     */
    private function createOrUpdateFromTelegram(array $telegramUser): ?User
    {
        try {
            Log::info('üîç –û–¢–õ–ê–î–ö–ê: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', [
                'telegram_user' => $telegramUser,
                'step' => 'start_create_or_update'
            ]);

            $chatId = (string) $telegramUser['id'];
            $firstName = (string) ($telegramUser['first_name'] ?? '');
            $lastName = (string) ($telegramUser['last_name'] ?? '');
            $username = (string) ($telegramUser['username'] ?? '');

            Log::info('üîç –û–¢–õ–ê–î–ö–ê: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', [
                'chat_id' => $chatId,
                'first_name' => $firstName,
                'last_name' => $lastName,
                'username' => $username,
                'step' => 'data_extracted'
            ]);

            if (empty($firstName)) {
                Log::warning('‚ùå –û–¢–õ–ê–î–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç first_name', [
                    'telegram_user' => $telegramUser,
                    'step' => 'missing_first_name'
                ]);
                return null;
            }

            Log::info('üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', [
                'chat_id' => $chatId,
                'step' => 'searching_existing_user'
            ]);

            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
            $user = User::where('chat_id', $chatId)->first();

            if ($user) {
                Log::info('‚úÖ –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', [
                    'user_id' => $user->id,
                    'chat_id' => $chatId,
                    'step' => 'existing_user_found'
                ]);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                $user->update([
                    'first_name' => $firstName,
                    'last_name' => $lastName ?: null,
                    'username' => $username ?: null,
                ]);

                Log::info('‚úÖ –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', [
                    'user_id' => $user->id,
                    'chat_id' => $chatId,
                    'first_name' => $firstName,
                    'step' => 'user_updated'
                ]);

                return $user;
            }

            Log::info('üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ', [
                'chat_id' => $chatId,
                'step' => 'creating_new_user'
            ]);

            $userData = [
                'first_name' => $firstName,
                'last_name' => $lastName ?: null,
                'username' => $username ?: null,
                'chat_id' => $chatId,
            ];

            Log::info('üîç –û–¢–õ–ê–î–ö–ê: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', [
                'user_data' => $userData,
                'step' => 'user_data_prepared'
            ]);

            $user = User::create($userData);

            Log::info('‚úÖ –û–¢–õ–ê–î–ö–ê: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', [
                'user_id' => $user->id,
                'chat_id' => $chatId,
                'username' => $username ?: null,
                'first_name' => $firstName,
                'step' => 'new_user_created'
            ]);

            return $user;
        } catch (Throwable $e) {
            Log::error('‚ùå –û–¢–õ–ê–î–ö–ê: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', [
                'error' => $e->getMessage(),
                'error_line' => $e->getLine(),
                'error_file' => $e->getFile(),
                'telegram_user' => $telegramUser,
                'step' => 'error_occurred'
            ]);
            return null;
        }
    }



    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
     */
    private function handleSkipMessage(int $chatId, TelegramBotService $service, Restaurant $restaurant): void
    {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        $service->sendMessage([
            'chat_id' => $chatId,
            'text' => '‚è≠Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞.',
        ]);

        // –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        $this->setAppKeyboard($chatId, $service, $restaurant);

        Log::info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', [
            'restaurant_id' => $restaurant->id,
            'chat_id' => $chatId,
        ]);
    }


    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private function handleContactMessage(array $contact, int $chatId, TelegramBotService $service, Restaurant $restaurant, array $from): void
    {
        try {
            Log::info('üìû –û–¢–õ–ê–î–ö–ê: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞', [
                'contact' => $contact,
                'chat_id' => $chatId,
                'from' => $from,
                'restaurant_id' => $restaurant->id,
                'step' => 'start_handle_contact'
            ]);

            $phoneNumber = $contact['phone_number'] ?? null;
            $firstName = $contact['first_name'] ?? '';
            $lastName = $contact['last_name'] ?? '';
            $userId = $contact['user_id'] ?? null;

            Log::info('üìû –û–¢–õ–ê–î–ö–ê: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞', [
                'phone_number' => $phoneNumber,
                'first_name' => $firstName,
                'last_name' => $lastName,
                'user_id' => $userId,
                'step' => 'contact_data_extracted'
            ]);

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
            Log::info('üìû –û–¢–õ–ê–î–ö–ê: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id', [
                'chat_id' => $chatId,
                'step' => 'searching_user_for_contact'
            ]);

            $user = User::where('chat_id', (string)$chatId)->first();

            if (!$user) {
                Log::error('‚ùå –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!', [
                    'chat_id' => $chatId,
                    'step' => 'user_not_found_for_contact'
                ]);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                $service->sendMessage([
                    'chat_id' => $chatId,
                    'text' => '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.',
                ]);

                return;
            }

            Log::info('‚úÖ –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω', [
                'user_id' => $user->id,
                'chat_id' => $chatId,
                'step' => 'user_found_for_contact'
            ]);

            if (!$phoneNumber) {
                Log::warning('‚ö†Ô∏è –û–¢–õ–ê–î–ö–ê: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', [
                    'contact' => $contact,
                    'step' => 'phone_number_missing'
                ]);

                $service->sendMessage([
                    'chat_id' => $chatId,
                    'text' => '‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                ]);

                return;
            }

            Log::info('üìû –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞', [
                'user_id' => $user->id,
                'phone_number' => $phoneNumber,
                'step' => 'saving_phone_number'
            ]);

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $user->update([
                'phone' => $phoneNumber,
            ]);

            Log::info('‚úÖ –û–¢–õ–ê–î–ö–ê: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', [
                'user_id' => $user->id,
                'chat_id' => $chatId,
                'phone_number' => $phoneNumber,
                'restaurant_id' => $restaurant->id,
                'step' => 'phone_number_saved'
            ]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            Log::info('üìû –û–¢–õ–ê–î–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', [
                'chat_id' => $chatId,
                'step' => 'sending_confirmation'
            ]);

            $service->sendMessage([
                'chat_id' => $chatId,
                'text' => '‚úÖ –°–ø–∞—Å–∏–±–æ! –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.',
            ]);

            Log::info('üìû –û–¢–õ–ê–î–ö–ê: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', [
                'chat_id' => $chatId,
                'step' => 'confirmation_sent'
            ]);

            // –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            Log::info('‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: –ó–∞–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', [
                'chat_id' => $chatId,
                'step' => 'replacing_keyboard'
            ]);

            $this->setAppKeyboard($chatId, $service, $restaurant);

            Log::info('‚úÖ –û–¢–õ–ê–î–ö–ê: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–º–µ–Ω–µ–Ω–∞', [
                'chat_id' => $chatId,
                'step' => 'keyboard_replaced'
            ]);
        } catch (Throwable $e) {
            Log::error('‚ùå –û–¢–õ–ê–î–ö–ê: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', [
                'error' => $e->getMessage(),
                'error_line' => $e->getLine(),
                'error_file' => $e->getFile(),
                'chat_id' => $chatId,
                'contact' => $contact,
                'restaurant_id' => $restaurant->id,
                'step' => 'error_in_handle_contact'
            ]);

            // –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            $this->setAppKeyboard($chatId, $service, $restaurant);
        }
    }





    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private function setAppKeyboard(int $chatId, TelegramBotService $service, Restaurant $restaurant): void
    {
        try {
            Log::info('‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', [
                'chat_id' => $chatId,
                'restaurant_id' => $restaurant->id,
                'step' => 'start_set_app_keyboard'
            ]);

            // URL –¥–ª—è Mini App
            $webAppUrl = $this->buildWebAppUrl($restaurant);

            Log::info('‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω', [
                'web_app_url' => $webAppUrl,
                'step' => 'web_app_url_built'
            ]);

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
            $replyMarkup = $service->createReplyKeyboard([
                [
                    [
                        'text' => '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                        'web_app' => ['url' => $webAppUrl],
                    ],
                ]
            ], true, false);

            Log::info('‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞', [
                'reply_markup' => $replyMarkup,
                'step' => 'keyboard_created'
            ]);

            Log::info('‚å®Ô∏è –û–¢–õ–ê–î–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', [
                'chat_id' => $chatId,
                'step' => 'sending_keyboard_message'
            ]);

            $result = $service->sendMessage([
                'chat_id' => $chatId,
                'text' => 'üéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.',
                'reply_markup' => $replyMarkup,
            ]);

            Log::info('‚úÖ –û–¢–õ–ê–î–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', [
                'chat_id' => $chatId,
                'result' => $result,
                'step' => 'keyboard_message_sent'
            ]);

            Log::info('‚úÖ –û–¢–õ–ê–î–ö–ê: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', [
                'restaurant_id' => $restaurant->id,
                'chat_id' => $chatId,
                'step' => 'app_keyboard_set_complete'
            ]);
        } catch (Throwable $e) {
            Log::error('‚ùå –û–¢–õ–ê–î–ö–ê: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', [
                'error' => $e->getMessage(),
                'error_line' => $e->getLine(),
                'error_file' => $e->getFile(),
                'chat_id' => $chatId,
                'restaurant_id' => $restaurant->id,
                'step' => 'error_in_set_app_keyboard'
            ]);
        }
    }

    /**
     * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
     */
    private function findByChatId(string $chatId): ?User
    {
        return User::where('chat_id', $chatId)->first();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º chat_id
     */
    private function existsByChatId(string $chatId): bool
    {
        return User::where('chat_id', $chatId)->exists();
    }
}
