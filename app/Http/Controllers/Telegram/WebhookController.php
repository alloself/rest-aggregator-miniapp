<?php

namespace App\Http\Controllers\Telegram;

use App\Http\Controllers\Controller;
use App\Models\Restaurant;
use App\Services\TelegramBotService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response as BaseResponse;
use Throwable;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
 * –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TelegramBotService v2.0 (API 9.1)
 * 
 * @version 2.0
 */
class WebhookController extends Controller
{
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
     */
    public function handle(Request $request, Restaurant $restaurant)
    {
        $update = $request->all();
        
        Log::info('Telegram Webhook –ø–æ–ª—É—á–µ–Ω', [
            'restaurant_id' => $restaurant->id,
            'update_type' => $this->getUpdateType($update),
        ]);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            if (!$restaurant->telegram_bot_token) {
                Log::warning('Webhook –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞', [
                    'restaurant_id' => $restaurant->id,
                ]);
                return response()->noContent(BaseResponse::HTTP_OK);
            }

            $telegramService = new TelegramBotService($restaurant->telegram_bot_token);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            $this->processUpdate($update, $telegramService, $restaurant);

        } catch (Throwable $e) {
            Log::error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook', [
                'restaurant_id' => $restaurant->id,
                'error' => $e->getMessage(),
                'update' => $update,
            ]);
        }

        return response()->noContent(BaseResponse::HTTP_OK);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    private function processUpdate(array $update, TelegramBotService $service, Restaurant $restaurant): void
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (isset($update['message'])) {
            $this->handleMessage($update['message'], $service, $restaurant);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
        if (isset($update['callback_query'])) {
            $this->handleCallbackQuery($update['callback_query'], $service, $restaurant);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline query
        if (isset($update['inline_query'])) {
            $this->handleInlineQuery($update['inline_query'], $service, $restaurant);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ web app query
        if (isset($update['web_app_query'])) {
            $this->handleWebAppQuery($update['web_app_query'], $service, $restaurant);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout query (–ø–ª–∞—Ç–µ–∂–∏)
        if (isset($update['pre_checkout_query'])) {
            $this->handlePreCheckoutQuery($update['pre_checkout_query'], $service, $restaurant);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private function handleMessage(array $message, TelegramBotService $service, Restaurant $restaurant): void
    {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
        if (($message['chat']['type'] ?? '') !== 'private') {
            return;
        }

        $text = (string) ($message['text'] ?? '');
        $chatId = $message['chat']['id'];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if ($text === '/start' || str_starts_with($text, '/start ')) {
            $this->handleStartCommand($chatId, $service, $restaurant, $text);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
     */
    private function handleStartCommand(int $chatId, TelegramBotService $service, Restaurant $restaurant, string $text): void
    {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º start –ø–∞—Ä–∞–º–µ—Ç—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        $startParam = null;
        if (str_starts_with($text, '/start ')) {
            $startParam = trim(substr($text, 7));
        }

        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $greeting = $this->buildWelcomeMessage($restaurant);
        
        // URL –¥–ª—è Mini App
        $webAppUrl = $this->buildWebAppUrl($restaurant);
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
        $replyMarkup = $service->createReplyKeyboard([
            [
                [
                    'text' => '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    'web_app' => ['url' => $webAppUrl],
                ],
            ]
        ], true, false);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $service->sendMessage([
            'chat_id' => $chatId,
            'text' => $greeting,
            'reply_markup' => $replyMarkup,
            'parse_mode' => 'HTML',
        ]);

        Log::info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', [
            'restaurant_id' => $restaurant->id,
            'chat_id' => $chatId,
            'start_param' => $startParam,
        ]);
    }



    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è inline –∫–Ω–æ–ø–æ–∫)
     */
    private function handleCallbackQuery(array $callbackQuery, TelegramBotService $service, Restaurant $restaurant): void
    {
        $callbackQueryId = $callbackQuery['id'];

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        $service->answerCallbackQuery([
            'callback_query_id' => $callbackQueryId,
        ]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline query
     */
    private function handleInlineQuery(array $inlineQuery, TelegramBotService $service, Restaurant $restaurant): void
    {
        $queryId = $inlineQuery['id'];
        $query = $inlineQuery['query'] ?? '';

        $results = [];

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
        $results[] = [
            'type' => 'article',
            'id' => 'restaurant_info',
            'title' => $restaurant->name,
            'description' => $restaurant->subtitle ?? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
            'input_message_content' => [
                'message_text' => "üè™ *{$restaurant->name}*\n\n" 
                    . ($restaurant->description ? strip_tags($restaurant->description) : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω!'),
                'parse_mode' => 'Markdown',
            ],
        ];

        $service->answerInlineQuery([
            'inline_query_id' => $queryId,
            'results' => $results,
        ]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ web app query
     */
    private function handleWebAppQuery(array $webAppQuery, TelegramBotService $service, Restaurant $restaurant): void
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Mini App
        $queryId = $webAppQuery['id'];
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏ —Ç.–¥.
        
        Log::info('–ü–æ–ª—É—á–µ–Ω Web App query', [
            'restaurant_id' => $restaurant->id,
            'query_id' => $queryId,
        ]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout query (–ø–ª–∞—Ç–µ–∂–∏)
     */
    private function handlePreCheckoutQuery(array $preCheckoutQuery, TelegramBotService $service, Restaurant $restaurant): void
    {
        $queryId = $preCheckoutQuery['id'];
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–¥–æ–±—Ä—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
        
        $service->answerPreCheckoutQuery([
            'pre_checkout_query_id' => $queryId,
            'ok' => true,
        ]);

        Log::info('–û–±—Ä–∞–±–æ—Ç–∞–Ω pre-checkout query', [
            'restaurant_id' => $restaurant->id,
            'query_id' => $queryId,
        ]);
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function buildWelcomeMessage(Restaurant $restaurant): string
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤–º–µ—Å—Ç–æ –ø–æ–ª—è welcome_message
        return "–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚Äî –≤—Å—ë —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –æ {$restaurant->name}: –º–µ–Ω—é, —Ñ–æ—Ç–æ, –∞–¥—Ä–µ—Å, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–æ–Ω—Å—ã —Å–æ–±—ã—Ç–∏–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
            . "–í–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Repeat ‚Äî —ç—Ç–æ –∑–Ω–∞–∫, —á—Ç–æ –≤—ã –∫ –Ω–∞–º –≤–µ—Ä–Ω–µ—Ç–µ—Å—å. –ò –≤–∞—à–∏ –¥—Ä—É–∑—å—è –≤ Telegram —É–≤–∏–¥—è—Ç, —á—Ç–æ –≤–∞–º –≤ {$restaurant->name} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n"
            . "–ê –µ—â—ë, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—à–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –±–ª–∏–∑–∫–∏—Ö –ª—é–¥–µ–π.\n\n"
            . "ü§© –ù–µ—É–∂–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –∫—É–¥–∞ —Ö–æ–¥—è—Ç –¥—Ä—É–∑—å—è ‚Äî –¥–∞–∂–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—è –∏—Ö –ª–∏—á–Ω–æ?!";
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è Mini App
     */
    private function buildWebAppUrl(Restaurant $restaurant): string
    {
        $baseUrl = rtrim((string) config('app.url'), '/');
        return "{$baseUrl}/restaurant/{$restaurant->slug}";
    }



    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private function getUpdateType(array $update): string
    {
        if (isset($update['message'])) {
            return 'message';
        }
        if (isset($update['callback_query'])) {
            return 'callback_query';
        }
        if (isset($update['inline_query'])) {
            return 'inline_query';
        }
        if (isset($update['web_app_query'])) {
            return 'web_app_query';
        }
        if (isset($update['pre_checkout_query'])) {
            return 'pre_checkout_query';
        }
        if (isset($update['shipping_query'])) {
            return 'shipping_query';
        }
        
        return 'unknown';
    }
}
